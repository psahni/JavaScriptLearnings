* Generators
- We can enter and exit from the function multiple times

function* numbers() {
  yield;
}
numbers()

const gen =  numbers();
gen.next(); { done: false }
gen.next(); { done: true }


function* shopping() {
  const step =  yield 'cash';

  return step;
}

gen = shopping(); // nothing happens till here

gen.next();
//{ value: 'cash', done: false}

gen.next('groceries');
//{ value: 'groceries', done: true}


#----------------------------------------------------------

function *shopping(){
  var cash = yield 'cash';
  var laundry = yield 'laundry';

  return laundry;
}
var gen = shopping();

gen.next(); //{value: "cash", done: false}
gen.next(); //{value: "laundry", done: false}
gen.next('money'); //{value: "money", done: true}

#----------------------------------------------------------


function *shopping(){
  var cash = yield 'cash';
  var laundry = yield 'laundry';

  return [cash, laundry];
}
var gen = shopping();

gen.next(); //{value: "cash", done: false}
gen.next('i1'); //{value: "laundry", done: false}
gen.next('i2'); //{value: ['i1', 'i2'], done: true}

#----------------------------------------------------------

- I want to iterate over only few properties of the object.

const engineeringTeam = {
  manager: 'Jill',
  lead: 'Jack',
  tester: 'phill',
  designer: 'alen'
}

function *TeamIterator(team){
  yield team.manager;
  yield team.lead;
}

const people = [];

for( let name of TeamIterator(engineeringTeam)) {
  people.push(name);
}

people // ['Jill', 'Jack']


* GENERATOR DELEGATION

const testingTeam = {
  lead: 'Anna',
  tester: 'Jig'
}

const engineeringTeam = {
  testingTeam,
  manager: 'Jill',
  lead: 'Jack',
  tester: 'phill',
  designer: 'alen'
}

function* TestingTeamIterator(testingTeam) {
  yield team.lead;
  yield team.tester;
}

function *TeamIterator(team){
  yield team.manager;
  yield team.lead;
  const testingTeamGenerator = TestingTeamIterator(team.testingTeam);
  yield* testingTeamGenerator; // Another generator that needs to be tracked. We hae multiple generators.
}

