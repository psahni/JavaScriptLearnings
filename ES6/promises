# PROMISE EXAMPLES

# 1

var p1 = new Promise((resolve, reject) => {
  if (true)
    throw new Error("rejected!"); // same as rejection
  else
    resolve(4);
});

p1.then((val) => val + 2)
 .then((val) => console.log("got", val))
 .catch((err) => console.log("error: ", err.message));

var p2 = new Promise((resolve, reject) => {
  resolve(4);
});

p2.then((val) => val + 2)
 .then((val) => { throw new Error("step 2 failed!") })
 .then((val) => console.log("got", val))
 .catch((err) => console.log("error: ", err.message));


# 2

var fetchJSON = function(url) {
  return new Promise((resolve, reject) => {
    $.getJSON(url)
      .done((json) => resolve(json))
      .fail((xhr, status, err) => reject(status + err.message));
  });
}

# 3

var itemUrls = {
  'http://www.api.com/items/1234',
  'http://www.api.com/items/4567'
},

itemPromises = itemUrls.map(fetchJSON);

Promise.all(itemPromises)
  .then(function(results) {
     results.forEach(function(item) {
  });
}).catch(function(err) {
    console.log("Failed:", err);
});


# 4

Difference with callbacks

- Promises are objects while callbacks are functions. Any function can be a callback, and every callback is a function.
Promises store information about the events, whether those are completed or not, if they have completed wht is their outcome.

- Callbacks are defined independently of the functions they are called from – they are passed in as arguments. 
These functions then store the callback, and call it when the event actually happens.

- Promises are created inside of asynchronous functions (those which will return response later), and then returned. 
When an event happens, the asynchronous function will update the promise to notify the outside world

-Callbacks are generally called with information on whether an operation succeeded or failed, 
and must be able to handle both scenarios.
Promises don’t handle anything by default, but success and failure handlers are attached later.

- Callbacks can be called multiple times by the functions they are passed to.
Promises can only represent one event – they are either successful once, or failed once.


# Example with success and error block.

delay(1000)
.then(function() {
    throw new Error("oh no.");
})
.then(null, function(error) {
    console.error(error);
});

# Example with catch black.

promise.catch(onReject)
This one is simple. promise.catch(handler) is equivalent to promise.then(null, handler).


# Full example
http://jsbin.com/hotile/15/edit?js,console

function finalRequestPromise(options) {
    return new Promise(function(resolve, reject) {
        finalRequest(options, function(error, data) {
            if (error) {
                reject(error);
            }
            else {
                resolve(data);
            }
        });
    });
}


Promise
  .all([initialRequestA(), initialRequestB()])
  .then(function(results) {
      var options = getOptionsFromInitialData(results[0], results[1]);
      return finalRequestPromise(options);
  })
  .then(
      function(file) { alert(file); },
      function(error) { alert('ERROR: '+error); } 
  );