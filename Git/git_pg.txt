git init

********************************************************************************************
git clone <repo>
  git clone https://github.com/facebook/react

********************************************************************************************
git command --help
  Alias: <git help command>

********************************************************************************************
git config
  git config user.name <name>

  git config --global user.name <name>

  git config --list --global
    Description: List global settings stored under <username>/.gitconfig

  git config --list
    Description: List repo related settings stored under .git/config

  git config --system core.editor <editor>
    Description: Editor can be any editor eg. vi

  git config --global --edit

********************************************************************************************
git status
  Description: Will show unstaged, staged and untracked files

********************************************************************************************
git add <directory or file>
  git add src/

  git add src/ public/

  git add src/js/index.js

  git add --all

  git add -p
    Description: Interactive session for selecting chunks and add them

git checkout <LAST COMMIT> <file>
  Description: Revert the changes

git reset <file>
  Description: Unstage file

********************************************************************************************
git commit -m "<message>"
  git commit -m "First Commit"

  git commit -am "First Commit"
    Alias: <git commit -a -m "First Commit">

  git commit
    Description:
 1. Opens a text editor (customizable via git config) for entering
commit message
 2. Follow 50/72 Rule:
   a. Heading should be wrapped in 50 Chars or less (Should be in yellow color)
b. Leave a blank line
c. Each line in the description should be wrapped in 72 Chars or less
 (The reason for wrapping your description lines at the 72nd mark is that
  git log adds a padding of 4 blank spaces when displaying the commit message.
  To center the message perfectly, and make it read well on an
80-column terminal,
  you’d want to leave space for 4 more blank spaces at right side.
  That’s where 72 comes from.)

Important: SVN tracks differences of a file, Git’s version control
model is based on snapshots.
          For example, an SVN commit consists of a diff compared to
the original file added to the repository.
  Git, on the other hand, records the entire contents of each file in
every commit. This makes many Git
  operations much faster than SVN, since a particular version of a
file doesn’t have to be “assembled”
  from its diffs—the complete revision of each file is immediately
available from Git's internal database.

  git commit --amend
    Description: Replace the last commit with the staged changes


********************************************************************************************
git diff
  git diff Head
    Description: Show difference between working directory and last commit.

  git diff --cached
    Description: Show difference between staged changes and last commit.

  git diff <source> <target>
    Description: Show difference between source and target (can be
anything; commit ID, HEAD, branch)
Eg: git diff master origin/master (Show difference between local
master and remote master)

********************************************************************************************
git remote (outputs origin or any other remote)
  git remote -v

  git remote add <name> <url>

  git remote set-url <name> <new url>

  git remote rename <old> <new>

  git remote remove <name>

git fetch
  Description: Fetch all the branches and update all the remote
tracking branches

git pull
  Default: remote set in .git/config and current branch
  Alias: <git fetch && git merge> (on current branch)

  git pull --rebase
    Description: Fetach changes and apply your commits on top

git push
  Default: remote set in .git/config and current branch

  git push --force

  git push --all
    Description: With tags

********************************************************************************************
git log
  git log <file>
    Description: Commits with file

  git log -n

  git log <source>..<target>

  git log --oneline

  git log --graph

  git log --stat

  git log --no-merges

  git log --merges

git show
  git show <commit Id, HEAD, master, file>

git shortlog
  git shortlog -n

  Description: Group commits by Author, -n for order by total commits

git reflog
  Description: You will get caught. Whenever HEAD changes. Checkout that ID

HEAD@{1} HEAD~1 HEAD^1

********************************************************************************************
git blame <file>
  Description: List changes by author for a particular file

********************************************************************************************
git branch (Local Branches)
  git branch -a

  git branch -v

  git branch "Branch Name"

  git checkout -b "Branch Name"

  git branch -m "old" "new"

  git checkout -b "Branch Name" <Base Branch>

  git checkout <branch>

  git branch ­d <branch>
    Description: Locally

  git push origin --delete <branch>  # Git version 1.7.0 or newer
    Alias: <git push origin :<branch>>

  git merge <branch> ­­no­commit ­­no­ff

  git rebase <base branch>
    git rebase -i <base branch>

     Description: Creates new commit and put on tip of base branch

git rebase -i <base branch> <current branch>
 Alias: <git checkout <current branch> && git rebase <base branch>>

 ********************************************************************************************
git reset
  Alias: <git reset --mixed>

  git reset --soft

  git reset --hard

  git reset <commit Id or anything HEAD~1 etc>

git revert <commit>
  Description: revert this commit by creating a new commit with staged changes

git checkout <commit Id>
  Description: Checkout the commit, test it and do git checkout
<branch>; put your HEAD in detached state

********************************************************************************************
git cherry-pick <commit Id>

git diff > patch.patch

git apply patch.patch

********************************************************************************************
git stash -u -a
  git stash save "Name"

  git stash pop
    Default: Apply stash@{0} and pop

  git stash pop stash@{n}

  git stash apply
    Default: stash@{0}

  git stash apply stash@{n}

  git stash list

  git stash drop stash@{n}

  git stash clear

  git stash show
	
	
********************************************************************************************
BLOB OBJECTS

To see all blob objects.
git ls-files -s