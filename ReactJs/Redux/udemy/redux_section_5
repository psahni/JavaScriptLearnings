################################
  Application Using Redux
################################

# 51

#- Ajax requests with Redux
#- Reducers and Actions  are for logic.
#- React component will not do that.
#- How to deal with state changes.
#- Github repo:-  StephenGrider/ReduxSimpleStarter

# 52
containers/search_bar.js

import React...

export default class SearchBar extends Component {
  render() {
    return (
      <form>
        ..
      </form>
    )
  }
}

#- In app.js

import SearchBar from '../containers/search_bar.js';

class App extends Component {
  render() {
    return (
      <div><SearchBar /></div>
    )
  }
}

#- In search_bar.js

constructor() {
  this.onInputChange = this.onInputChange.bind(this); // Bind the context;
}

onInputChange(event) {
  this.setState({ term: event.target.value });
}

In render function ->

<input
  value={this.state.term}
  onChange={(this.onInputChange}
/>

# 54 Form Elements in React.
#- Add onClick handler on the submit button
#- We dont want to submit the form when user clicks on submit or press enter inside textfield. And the
page refreshes. Prevent the behaviour by add an event on the form element.

onFormSubmit(event) {
  event.preventDefault();
}

<form onSubmit={this.onFormSubmit}>
..
</form>

# 55 Api requests.
#- Whether API

actions/index.js

#- save the api key
API_KEY='49320423804fndslfnd748324';

# 56 Introduction to middleware

#- Middleware are like gatekeepers. They inspect the action. They can modify the action.
#- Intercept the action before passing them to reducers.
#- A layer between action creator and reducers.

#- Redux Promise
npm install --save redux-promise


#- 57
