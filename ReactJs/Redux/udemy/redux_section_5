################################
  Application Using Redux
################################

# 51

#- Ajax requests with Redux
#- Reducers and Actions  are for logic.
#- React component will not do that.
#- How to deal with state changes.
#- Github repo:-  StephenGrider/ReduxSimpleStarter

# 52
containers/search_bar.js

import React...

export default class SearchBar extends Component {
  render() {
    return (
      <form>
        ..
      </form>
    )
  }
}

#- In app.js

import SearchBar from '../containers/search_bar.js';

class App extends Component {
  render() {
    return (
      <div><SearchBar /></div>
    )
  }
}

#- In search_bar.js

constructor() {
  this.onInputChange = this.onInputChange.bind(this); // Bind the context;
}

onInputChange(event) {
  this.setState({ term: event.target.value });
}

In render function ->

<input
  value={this.state.term}
  onChange={(this.onInputChange}
/>

# 54 Form Elements in React.
#- Add onClick handler on the submit button
#- We dont want to submit the form when user clicks on submit or press enter inside textfield. And the
page refreshes. Prevent the behaviour by add an event on the form element.

onFormSubmit(event) {
  event.preventDefault();
}

<form onSubmit={this.onFormSubmit}>
..
</form>

# 55 Api requests.
#- Whether API

actions/index.js
#- save the api key
API_KEY='49320423804fndslfnd748324';

# 56 Introduction to middleware

#- Middleware - A layer between action creator and reducers.
#- Middleware are like gatekeepers. They inspect the action. They can modify the action.
#- Intercept the action before passing them to reducers.

#- Redux Promise
npm install --save redux-promise

# 57
#- actions/index.js

import axios from 'axios';
export const FETCH_WEATHER = 'FETCH_WEATHER'; // Can be imported in other files.

export function fetchWeather(city) {
  const url = `..${city}, us`;
  const request = axios.get(url);

  return {
    type: FETCH_WEATHER,
    payload: request
  };
}

// fetchWeather is an action creator.

# 58
#- containers/search_bar.js

import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { fetchWeather } from '../actions/index'; // import the action creator into search bar container.

#- We want to hook the action creator fetchWeather to our search_bar container.

#- IMP: This is how we connect:-
``
function mapDispatchToProps(dispatch) {
  return bindActionCreators({ fetchWeather }, dispatch);
}

export default connect(null, mapDispatchToProps)(SearchBar);
``

#- This container does not care about the state and mapDispatchToProps is always the second argument in the connect function,
hence the first argument is null.

#- In containers/search_bar.js
``
onFormSubmit(event) {
  event.preventDefault();

  this.props.fetchWeather(this.state.term);
  this.setState({term: ''});
}
``

# 59
#- reducers/reducer_weather.js

export default function(state=null, action) {
  console.log('action received..', action);
  return state;
}

#- Once we make a reducer, we need to combine it into rootReducer.
import WeatherReducer from './reducer_weather';

const rootReducer = combineReducers({
  weather: WeatherReducer
});

export default rootReducer;

#-
export function fetchWeather(city) {
  const url = `..${city}, us`;
  const request = axios.get(url);

  return {
    type: FETCH_WEATHER,
    payload: request
  };
}

// This request is a promise. This will pass as action into the reducer. Redux promise is a middleware.
// The payload property is modified from the Redux Promise middleware. If it is a promise, it stops the action entirely.
// It resolves the request( wait for the promise), wait for the result and passes to action in the reducer.

# 60 Avoid State Mutations in Reducers.

#- reducers/reducer_weather.js

import { FETCH_WEATHER }  from '../actions/index.js';
export default function(state=[], action) {
  switch(action.type) {
    case FETCH_WEATHER:
      //return state.concat([action.payload.data]); // It does not mutates the state, just returns the new state.
      return [ action.payload.data, ...state ];
  }
}

# Continue from 61
#- containers/weather_list.js

import React, { Component } from 'react';
import connect from 'react-redux';


class WeatherList extends Component {
  render() {
    return(
      <table className="table table-hover">
        <thead>
          <tr>
            <th>City</th>
            <th>Temprature</th>
            <th>Pressure</th>
            <th>Humidity</th>
          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>
    );
  }
}

function mapStateToProps({ weather }) {
  return { weather: weather };
}


// Connect mapStateToProps to the container
export default connect(mapStateToProps)(WeatherList);

#- In app.js

import WeatherList from '../containers/weather_list.js'

<WeatherList />

#- reducers/reducer_weather.js

#- reducers/index.js

import WeatherReducer from './reducer_weather';

const rootReducer = combineReducers({
  weather: WeatherReducer
});

export default rootReducer;

# 62

weather_list.js

renderWeather(cityData) {
  render cityData.city.name ;
}

render() {
  ...
  <tbody>
    {this.props.weather.map(this.renderWeather)}
  </tbody>
  ..
}

//this.props.weather containers array of objecs of city data.

[
  city: {

  },
  list: {

  }
]

# 63
#- React Sparkline for making charts

const temps = cityData.list.map(weather =>  weather.main.temp);

created a colummns for rendering data. Refer sparkline for passing values.

we passed temps values to sparkline.

# 64 Making a reusable chart component.

components/chart.js

Some props come in, just display it. So in this case a functional component is more useful.
If component state is the concern, then class based component should be used.


export default (props) => {
  return(
    <Sparklines height={props.height} width={props.width} data={props.data}>

    </Sparklines>
  )
}

containers/weather_list

import Chart from '../components/chart'

<Chart data={temps} color='orange'/>

# 65

chart.js

import _ from 'lodash';

function average(data) {
  return _.round(_.sum(data)/data.length);
}

export default .. {
  return (
    <Sparklines height={props.height} width={props.width} data={props.data}>
      <SparklinesLine color={props.color} />
    </Sparklines>
    <div>{average(props.data)}</div>
  );
}


# 66 Google Maps integration

components/google_map.js

import react, { Component } from 'react';

class GoogleMap extends Component {

  componentDidMount() {
    new gogle.maps.Map(this.refs.map, {
      zoom: 12,
      center: {
        lat: this.props.lat,
        lng: this.props.lng
      }
    });
  }

  render() {
    return <div ref="map" />;
  }
}

export default GoogleMap;

#- ref system is reference...to reference the element on the page.

# 66

Life cycle method - componentDidMount - this method is automatically called.

# 67 mainly about google map rendering

# 68
