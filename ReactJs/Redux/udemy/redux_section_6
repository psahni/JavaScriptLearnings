* We have learned how to fetch data, we have to learn how to post data.

# Routing in Redux and post apis

# 70 explanation about rest apis reduxblog.herokuapp.com

# 71 React Router

$ npm install react-router@2.0.0.rc5

# 72
History lib is javascript package, it manages the url. Watches the url.
Whenevr the url changes, history lib keeps track of it. Monitors it.

History gives the url to React Router. React Router takes it and passed it over to React.
React Router on the basis of the url and decides and informs the React that these are
the components you need to render. React shows the content on the basis of the url. Renders the page.

There libs are working:-
* History
* React-Router
* React

# 73

In index.js

import { Router, browserHistory } from 'react-router';

// http://blog.com/posts/5
// Whenever the later part of the url changes, it tracks it.
// hashHistory - Monitors what got changed after the '#' in the url

# 74 Routes Configuration

#- src/routes.js

``
import React from 'react';
import { Route, IndexRoute } from 'react-router';

import App from './components/app'

//Route:- mapping of url and a component.

const Greeting = () => {
  return <div>Hey there!</div>
}

export default (
  <Route path='/' component={App}>
    <Route path="greet" component={Greeting} />
    <Route path="greet2" component={Greeting} />
    <Route path="greet3" component={Greeting} />
  </Route>
)

// /greet  --> App component renders along with greeting component.
// /greet2 --> App component renders along with greeting component.

``
# - index.js
import routes from './routes';

ReactDOM.render(
  <Provider store={createStoreWithMiddleware(reducers)}>
    <Router history={browserHistory} routes={routes} />
  </Provider>
  , document.querySelector('.container'));

  # 75

#- src/components/app.js

#- App should render greeting component also.

import React from 'react';
import { Component } from 'react';

export default class App extends Component {
  render() {
    return(
      <div>
        React Simple Starter
        {this.props.children} // THIS WILL RENDER GREETING COMPONENT ALSO
      </div>
    );
  }
}

# Cont. from 76

components/posts_index.js

* Concept of Index Route

* on root url, we want to render only App component. On others we want
to render App, Greeting component.

* src/routes.js

import { Route, IndexRoute } from 'react-router';
import PostsIndex from './components/posts_index';

..

export default (
  <Route path='/' component={App}>
    <IndexRoute componet={PostsIndex}>
    <Route path="greet" component={Greeting} />
    <Route path="greet2" component={Greeting} />
    <Route path="greet3" component={Greeting} />
  </Route>
);

# 77 Index Action

npm install --save axios redux-promise

* src/index.js

..
import reducers from './reducers';
import routes from './routes';
import promise from 'redux-promise';
..

const createStoreWithMiddleware = applyMiddleware(
  promise
)(createStore);

* src/actions/index.js

import axios from 'axios';
export const FETCH_POSTS = 'FETCH_POSTS';
const ROOT_URL = 'http://reduxblog.herokuapp.com/api';
const API_KEY = '?key=abcdefgh';

export function fetchPosts(){
  const request =  axios.get(`${ROOT_URL}/posts${API_KEY}`);

  return {
    type: FETCH_POSTS,
    payload: request
  }
}

# 78 Catching Data with Posts Reducer.


* In index.js inside reducers

``
import { combineReducers } from 'redux';
import PostsReducer from  './reducer_posts';

const rootReducer = combineReducer({
  posts: PostsReducer
});

export default rootReducer;
``

* reducers/reducer_posts.js

import { FETCH_POSTS } from '../actions/index';

const INITIAL_STATE = { all: [], post: null }; // Two states: 'all posts' and 'selected post'

export default function(state = INITIAL_STATE, action) {
  swtich(action.type) {
    case FETCH_POSTS:
    default:
      return state;
  }
}

# 79 PostsReducer implementation contd.

* reducers/reducer_posts.js

..
case FETCH_POSTS:
    return { ..state, all: action.payload.data };
..

Data is available in  - action.payload.data

# 80 Life Cycle Methods

* We need to call action creator for fetching list of data.

components/posts_index.js

import React, { Component }

class PostsIndex extends Component {
  componentWillMount(){

  }
  render() {
    return(
      <div>List of blog posts</div>
    );
  }
}

export default PostsIndex;

* componentWillMount is a life cycle method. React calls this method whenever a component is about to be render.
It is only called once. Not called on subsequent renders.

# 81 Fetching Data with Life Cycle methods.

posts_index.js

..

import { connect } from 'react-redux';
//import { bindActionCreators } from 'react-redux';
import { fetchPosts } from '../actions/index';

..

//function mapDistpatchToProps(dispatch) {
  //return bindActionCreators({ fetchPosts }, dispatch );
//}

export default connect(null, mapDistpatchToProps)(PostsIndex);

// It is because of the above line we get access to fetchPosts in props.

// We can write above two lines or we can write similar thing in following way:-

export default connect(null, { fetchPosts: fetchPosts })(PostsIndex);
//export default connect(null, { fetchPosts })(PostsIndex); => only this line will do the required work.

# 82 create new posts.

components/post_new.js

import React, { Component } from 'react';

class PostsNew extends Component {
  render() {
    return (
      <div>
        Create Form
      </div>
    )
  }
}

export default PostsNew;

src/routes.js

import PostsNew from './components/posts_new';

export default (
  <Route path="/" component={App}>
    ..
    <Route path='posts/new' component={PostsNew}>
    ..
  </Route>
)

# 83 Navigation with Link component
# Linking between routes
# Link component behaves like a anchor tag
posts_index.js

import { Link } from 'react-router';

render() {
  return (
    <div>
      <div className="text-xs-right">
        <Link to="/posts/new" className="btn btn-primary">
          Add a Post
        </Link>
      </div>
    </div>
  )
}

# 84 Forms and Form submission

* Validation of inputs
* Redux-Form library
* Documentation - http://redux-form.com/6.5.0/docs/GettingStarted.md/
* npm install --save redux-form@4.1.3

* Hook the reducer with form.

reducers/index.js

import { reducer as formReducer } from 'redux-form';

const roortReducer = combineReducers({
  ..
  form: formReducer
})

- We pass all the config parameters to Redux Form.

# 85 Form submission

components/post_new.js

import React, { Component } from 'react';
import { reduxForm } from 'redux-form';

class PostsNew extends Component {
  render() {
    return (
      <div>
        Create Form
      </div>
    )
  }
}

export default reduxForm({
  form: 'PostsNewForm'
  fields: ['title', 'categories', 'content'] // Fields in the form.
})(PostsNew);

// user types something in.. record it on application state

state === {
  form: {
    PostsNewForm: {
      title: '..',
      categories: '..',
      content: '...'
    }
  }
}

class PostsNew extends Component {
  render() {
    return (
      <form>
        <h3>Create a new Post</h3>
        <div className='form-group'>
          <label>Title</label>
          <input type="text" className="form-control"/>
        </div>
        <div className='form-group'>
          <label>Content</label>
          <textarea className="form-control"/>
        </div>
        <button type="submit" className="btn btn-primary">Submit</button>
      </form>
    )
  }
}

# 86 Passing control to Redux Form

PostsNew

render() {
  const { fields: { title, categories, content }, handleSubmit } = this.props; // configuration part
  const title = this.props.fields.title;

  return (
    <form onSubmit={handleSubmit}>
      <input ... {..title }> // Destructuring of objects.
    </form>
  )
}


# 87 CreatePost Action Creator

import { createPost } from '../actions/index';

<form onSubmit={handleSubmit(this.props.createPost)}>
</form>
export default reduxForm({
  form: 'PostsNewForm',
  fields: ['title', 'categories', 'content']
})(PostsNew);

// first argument is config, mapStateToProps, mapDispatchToProps

export function createPost(props){
  request call..post request..
  return {
    type: CREATE_POST,
    payload: request
  }
}

# 88 Form Validation

Below the comment, write validation function:-

function validate(values){  // Provided by Redux Form
  const errors = {};
  if(!values.title) {
    errors.title = 'Enter a username';
  }
  return errors;
}

Write below input field for title
<div className="text-help">
  {title.error}
</div>

{ title.touched ? title.error : ''} -> To prevent error message on load.

# 89 Form Validation 2

function validate(values) {
  ..
  if(!values.categories) {
    errors.categories = "Enter categories";
  }

  if(!values.content) {
    errors.content = "Enter content";
  }
}

<div className={`form-group ${ categories.touched && categories.invalid ? 'has-danger' : ''}`}>
</div>

# 90 Navigation on Submit

Context Api

class PostsNew extends Component {
  static contextTypes = {
    router: PropTypes.object
  }
}

* To read parent properties we use context types

onSubmit(props){
  this.props.createPost(props)
    .then(() => {
      this.context.router.push('/');
    })
}


# 91
class PostsNew extends Component {
  componentWillMoung() {
    this.props.fetchPosts();
  }

  renderPosts() {
    return this.props.posts.map((post) => {
      return(
        <li className="list-group-item" key={post.id}>
          <span className="pull-xs-right">{post.categories}</span>
        </li>
      );
    });
  }

  render() {
    return( this.renderPosts() );
  }
}

function mapStateToProps(state) {
  return { posts: state.posts.all };
}

export default connect(mapStateToProps, { fetchPosts })(PostsIndex);

# 92

routes.js

export default (
  <Route path="/" component={App}>
    ..
    <Route path="posts/new" component={PostsNew}>
    <Route path="posts/:id" component={PostsShow}>
    ..
  </Route>
)

* posts_show.js
import React, { Component } from 'react';

class PostsShow extends Component {
  render() {
    return <div>Show post {this.props.params.id}
  }
}

* use link component like this:-

import { fetchPosts } from '../actions/index';
import { Link }  from 'react-router';

<Link to={'posts/' + post.id}>
    ....
    <strong>{post.title}</strong>
</Link>

# 93 Loading data on render

On post show page, we need to show the specific post. So we will create an action creator inside actions/index.js
'fetchPost' that will fetch the post with specfic id, that will return payload and action. The reducer will grab it.

In PostsShow component

import { fetchPost } from '../actions/index';

class PostsShow extends Component {
  componentWillMount() {
    this.props.fetchPost(this.props.params.id);
  }
}

export default connect(null, { fetchPost })(PostsShow);

#- actions/index.js

export function fetchPost(id) {
  const request =  axios.get(`${ROOT_URL}/posts/${id}${API_KEY}`)

  return {
    type: FETCH_POST,
    payload: request
  }
}


#- reducer_posts.js


case FETCH_POST:
  retun {..state, post: action.payload.data };

# 94 Handling Null Props

export function mapStateToProps() {
  return { post: state.posts.post };
}

* Component starts rendering but data to render might not be loaded.

if(!this.props.post){
  return '<div>Loading..</div>';
}

return (
  <div>
    Post information...
  </div>
)

# 95 Delete Action Creator.
actions/index.js

DELETE_POST='DELETE_POST';

..

export function deletePost(id) {
  const request = axios.delete(`${ROOT_URL}/${id}/${API_KEY}`);

  return {
    type: DELETE_POST,
    payload: request
  }
}

In PostsShow component:-

import {fetchPost, deletePost} from '../actions/index';

..
Inside component:-

onDeleteClick() {
  this.props.deletePost(this.props.params.id)
}

Inside render() function
..

<button
  onClick={this.onDeleteClick.bind(this)}
>
</button>

export default connect(mapStateToProps, )

# 96 Navigation on Delete

* For navigation we need have router contextType.

static contextTypes = {
  router: PropTypes.object
}

Then, wherever we need, we can do something like  this.context.router.push('/')

onDeleteClick() {
  this.props.deletePost(this.props.params.id).then(() => {
    this.context.router.push('/');
  });
}


# 97

- List of posts
- Navigate to post
- Delete
- Create a new post
- Cancel post


* In src/index.js. We pass router configuration object instead of the App component.
The indexRoute will render the App component.

ReactDOM.render(
  <Provider store={createStoreWithMiddleware(reducers)}>
    <Router history={browserHistory} routes={routes} />
  </Provider>
, document.querySelector('.container'));
