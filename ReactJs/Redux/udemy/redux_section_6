* We have learned how to fetch data, we have to learn how to post data.

# Routing in Redux and post apis

# 70 explanation about rest apis reduxblog.herokuapp.com

# 71 React Router

$ npm install react-router@2.0.0.rc5

# 72
History lib is javascript package, it manages the url. Watches the url.
Whenevr the url changes, history lib keeps track of it. Monitors it.

History gives the url to React Router. React Router takes it and passed it over to React.
React Router on the basis of the url and decides and informs the React that these are
the components you need to render. React shows the content on the basis of the url. Renders the page.

There libs are working:-
* History
* React-Router
* React

# 73

In index.js

import { Router, browserHistory } from 'react-router';

// http://blog.com/posts/5
// Whenever the later part of the url changes, it tracks it.
// hashHistory - Monitors what got changed after the '#' in the url

# 74 Routes Configuration

#- src/routes.js

``
import React from 'react';
import { Route, IndexRoute } from 'react-router';

import App from './components/app'

//Route:- mapping of url and a component.

const Greeting = () => {
  return <div>Hey there!</div>
}

export default (
  <Route path='/' component={App}>
    <Route path="greet" component={Greeting} />
    <Route path="greet2" component={Greeting} />
    <Route path="greet3" component={Greeting} />
  </Route>
)

// /greet  --> App component renders along with greeting component.
// /greet2 --> App component renders along with greeting component.

``
# - index.js
import routes from './routes';

ReactDOM.render(
  <Provider store={createStoreWithMiddleware(reducers)}>
    <Router history={browserHistory} routes={routes} />
  </Provider>
  , document.querySelector('.container'));

  # 75

#- src/components/app.js

#- App should render greeting component also.

import React from 'react';
import { Component } from 'react';

export default class App extends Component {
  render() {
    return(
      <div>
        React Simple Starter
        {this.props.children} // THIS WILL RENDER GREETING COMPONENT ALSO
      </div>
    );
  }
}

# Cont. from 76

components/posts_index.js

* Concept of Index Route

* on root url, we want to render only App component. On others we want
to render App, Greeting component.

* src/routes.js

import { Route, IndexRoute } from 'react-router';
import PostsIndex from './components/posts_index';

..

export default (
  <Route path='/' component={App}>
    <IndexRoute componet={PostsIndex}>
    <Route path="greet" component={Greeting} />
    <Route path="greet2" component={Greeting} />
    <Route path="greet3" component={Greeting} />
  </Route>
);

# 77 Index Action

npm install --save axios redux-promise

* src/index.js

..
import reducers from './reducers';
import routes from './routes';
import promise from 'redux-promise';
..

const createStoreWithMiddleware = applyMiddleware(
  promise
)(createStore);

* src/actions/index.js

import axios from 'axios';
export const FETCH_POSTS = 'FETCH_POSTS';
const ROOT_URL = 'http://reduxblog.herokuapp.com/api';
const API_KEY = '?key=abcdefgh';

export function fetchPosts(){
  const request =  axios.get(`${ROOT_URL}/posts${API_KEY}`);

  return {
    type: FETCH_POSTS,
    payload: request
  }
}

# 78 Catching Data with Posts Reducer.


* In index.js inside reducers

``
import { combineReducers } from 'redux';
import PostsReducer from  './reducer_posts';

const rootReducer = combineReducer({
  posts: PostsReducer
});

export default rootReducer;
``

* reducers/reducer_posts.js

import { FETCH_POSTS } from '../actions/index';

const INITIAL_STATE = { all: [], post: null }; // Two states: 'all posts' and 'selected post'

export default function(state = INITIAL_STATE, action) {
  swtich(action.type) {
    case FETCH_POSTS:
    default:
      return state;
  }
}

# 79 PostsReducer implementation contd.

* reducers/reducer_posts.js

..
case FETCH_POSTS:
    return { ..state, all: action.payload.data };
..

Data is available in  - action.payload.data

# 80 Life Cycle Methods

* We need to call action creator for fetching list of data.

components/posts_index.js

import React, { Component }

class PostsIndex extends Component {
  componentWillMount(){

  }
  render() {
    return(
      <div>List of blog posts</div>
    );
  }
}

export default PostsIndex;

* componentWillMount is a life cycle method. React calls this method whenever a component is about to be render.
It is only called once. Not called on subsequent renders.

# 81 Fetching Data with Life Cycle methods.

posts_index.js

..

import { connect } from 'react-redux';
import { bindActionCreators } from 'react-redux';
import { fetchPosts } from '../actions/index';

..

function mapDistpatchToProps(dispatch) {
  return bindActionCreators({ fetchPosts }, dispatch );
}

export default connect(null, mapDistpatchToProps)(PostsIndex);

// It is because of the above line we get access to fetchPosts in props.

// We can write above two lines or we can write similar thing in following way:-

export default connect(null, { fetchPosts: fetchPosts })(PostsIndex);
